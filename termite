#!/usr/bin/env ruby
# 
# Termite
# command line time tracker
# Version: 0.7
# Author: joão paulo camargo
# 
# This script is released under the MIT License
# Copyright © 2010 João Paulo Camargo (http://jpcamargo.com)
# 
# == Installation
# read the readme.md file
# 

# Configuration
$LOAD_PATH << File.dirname(__FILE__)
require 'util.rb'
require 'sqlite3'
require 'getoptlong'
require 'active_record'
require 'entry.rb'

## database file name
DB_NAME = 'termite.db'

## termite locale related configuration
COUNTRY = 'BR'
REGION = 'SP'
require "lib/locale-#{COUNTRY}.rb"

## Adium config (set ADIUM to false if you don't want to use this feature)
ADIUM = true
ADIUM_STATUS = {
  :available => 'Available',
  :lunch => 'Out to lunch',
  :away => 'Away',
  :sick => '',
  :stop => 'Out for the day'
}

# 
# Script starts here (change it if you want to)
# 

help_message = %{Usage: termite [command] [[params]]
Commands:
start     Marks that you started working
stop      Marks that you stopped working
lunch     Marks that you are out to lunch
back      Marks that you are back from lunch
sick      Marks that you are sick for the day
list      List the last n entries
add       Adds a new entry, used to add times for previous dates and times
edit      Updates an entry by the given id with given date 
update    Updates the last entry, setting the date and time to now
delete    Removes an entry by the given id
report    Shows a report of the latest information
help      Shows this message
}

# create or select the database
DB = SQLite3::Database.new(File.dirname(__FILE__)+"/"+DB_NAME)
begin
  table = DB.execute("analyze timesheet")
rescue Exception => e
  # create table if it doesn't exists yet
  puts "Running the script for the first time, creating table timesheet".banner.tc('black', 'green')
  DB.execute("create table timesheet (timesheet_id integer primary key, date datetime, status text, comments text)")
  puts help_message
end

# color picking function
def cpick *args
  args = args.extract_options!
  time = Time.at(args[:date])
  return 'cyan' if [0,6].include? time.wday
  # return 'white', 'red' if time.is_holiday? && args[:bg]
  return 'red' if time.is_holiday?
  case args[:status]
    when 'sick'
      'pink'
    when 'start'
      ('white' if time.hour == TIME_CONFIG[:start]) ||
      ('green' if time.hour == TIME_CONFIG[:start]+1) ||
      ('yellow' if time.hour == TIME_CONFIG[:start]+2) ||
      'red'
    when 'stop'
      ('white' if time.hour == TIME_CONFIG[:end]) ||
      ('green' if time.hour == TIME_CONFIG[:end]+1) ||
      ('yellow' if time.hour == TIME_CONFIG[:end]+2) ||
      'red'
    when 'lunch'
      ('white' if time.hour == 13) ||
      ('green' if time.hour == 14) ||
      ('yellow' if time.hour == 15) ||
      'red'
    when 'back'
      ('white' if time.hour == 14) ||
      ('green' if time.hour == 15) ||
      ('yellow' if time.hour == 16) ||
      'red'
    when 'lunch_duration'
      ('white' if time.hour < 1 && time.min <= 15) ||
      ('green' if time.hour < 1 && time.min > 15) ||
      ('yellow' if time.hour == 1 && time.min < 15) ||
      'red'
    when 'total'
      ('white' if time.hour == TIME_CONFIG[:workday] and time.min <= 30) ||
      ('green' if time.hour == TIME_CONFIG[:workday]+1 || (time.hour == TIME_CONFIG[:workday] and time.min >= 30)) ||
      ('yellow' if time.hour == TIME_CONFIG[:workday]+2 || time.hour < TIME_CONFIG[:workday]) ||
      'red'
    else
      'white'
  end
end

def set_adium_status status, msg=''
  return if !ADIUM || status == ''
  `osascript -e 'tell application "Adium" to go #{status} #{'with message "'+ msg +'"' if msg != ''}' 2>/dev/null`
end

def show_status n
  @row ||= Entry.last
  if !@row.nil?
    "#{@row.status_message} since #{@row.datetime} ~ #{Time.now.datetimesec}".left(n).green
  else
    "Please use 'termite start' to initialize the database.".left(n).yellow
  end
end

# get options from ARGV
opts = GetoptLong.new(
  ['--no-header', GetoptLong::NO_ARGUMENT],
  ['-m', GetoptLong::REQUIRED_ARGUMENT]
)
comments = ''
no_header = false
opts.each do |option,value|
  comments = value if option.to_s == '-m'
  no_header = true if option.to_s == '--no-header'
end

# now deal with the commands
begin
  now = Time.now
  status_size = 80
  case arg = ARGV.shift
    when 'add'
      command = ARGV.shift
      date = Time.parse(ARGV.shift)
      if ['start','stop','lunch','back'].include?(command) && date.is_a?(Time)
        Entry.create :date => date.to_i, :status => command, :comments => comments
      end
    when 'edit'
      id = ARGV.shift
      date = Time.parse(ARGV.shift)
      puts "#{id} #{date.inspect}"
      if date.is_a?(Time) and id =~ /\d+/
        row = Entry.find(:conditions => "timesheet_id = #{id}").first
        if !row.nil?
          puts Entry.header
          puts row.to_list
          puts ""
          puts "are you sure you want to change the date in this entry to '#{date.iso}'? [y/N]".warning
          confirmation = STDIN.gets.chomp
          if confirmation =~ /y/i
            Entry.update :conditions => "timesheet_id=#{id}", :fields => ["date=#{date.to_i}","comments='#{comments}'"]
          end
        end
      else
        puts "The correct date format is YYYY-mm-dd HH:MM".banner.warning!
      end
    when 'delete'
      id = ARGV.shift
      if id =~ /\d+/
        row = Entry.find(:conditions => "timesheet_id = #{id}").first
        if !row.nil?
          puts Entry.header
          puts row.to_list
          puts ""
          puts "are you sure you want to delete this entry? [y/N]".warning
          confirmation = STDIN.gets.chomp
          Entry.remove :conditions => "timesheet_id=#{id}" if confirmation =~ /y/i
        end
      else
        puts "You need to entry a valid ID.".banner.error!
      end
    when 'update'
      row = Entry.last
      if !row.nil?
        puts Entry.header
        puts row.to_list
        puts ""
        puts "are you sure you want to change the date in this entry to '#{now.iso}'? [y/N]".warning
        confirmation = STDIN.gets.chomp
        Entry.update :conditions => "timesheet_id=#{row.timesheet_id}", :fields => ["date=#{now.to_i}","comments='#{comments}'"] if confirmation =~ /y/i
      end
    when 'list'
      limit = ARGV.shift || 10
      rows = Entry.find({:order => 'date desc', :limit => limit})
      status_size = 112
      unless ARGV.include?('--no-header')
        puts "Last #{rows.size} entries".center(status_size).black_yellow_bold
        puts Entry.header
      end
      worked_hours = 0
      worked_days = []
      rows.each do |row|
        worked_hours += row.to_i - TIME_CONFIG[:fix_time]
        worked_days << row.date if row.to_i > 0 && ![0,6].include?(row.to_time.wday) && !row.to_time.is_holiday?
        puts row.to_list
      end
      worked_days = worked_days.uniq.size
      total = Time.at(worked_hours + TIME_CONFIG[:fix_time])
      average = Time.at((worked_hours/worked_days) + TIME_CONFIG[:fix_time]) if worked_days > 0
      
      footer = ''
      footer += "worked: #{worked_days} days".left(56).black_white_bold
      footer += (worked_days > 0 ? "EWT #{worked_days * 8} hours" : '').left(56).black_white_bold
      puts footer + "\n\n" if worked_days > 0 || worked_hours > 0
    when 'sick'
      row = Entry.last
      if !row.nil? && row.stop? # == 'stop'
        today = Time.local(now.year,now.month,now.day)
        Entry.create :date => today.to_i, :status => arg, :comments => comments
        set_adium_status('away', ADIUM_STATUS[:sick])
      else
        puts %{
Error, you forgot to log you were leaving work, cannot add a sick day.
Please use "termite add stop [YYYY-mm-dd HH:MM], and try again."
}
      end
    when 'start'
      row = Entry.last
      if !row.nil? && row.stop? # status == 'stop'
        Entry.create :date => now.to_i, :status => arg, :comments => comments
        set_adium_status('available', ADIUM_STATUS[:available])
      else
        puts %{
Error, you forgot to log you were leaving work, cannot start.
Please use "termite add stop [YYYY-mm-dd HH:MM], and try again."
}
      end
    when 'lunch'
      row = Entry.last
      if !row.nil? && row.start? # status == 'start'
        Entry.create :date => now.to_i, :status => arg, :comments => comments
        set_adium_status('away', ADIUM_STATUS[:lunch])
      else
        puts %{
Error, you forgot to log you were working, cannot go to lunch.
Please use "termite add start [YYYY-mm-dd HH:MM], and try again."
}
      end
    when 'back'
      row = Entry.last
      if !row.nil? && row.lunch? # status == 'lunch'
        Entry.create :date => now.to_i, :status => arg, :comments => comments
        set_adium_status('available', ADIUM_STATUS[:available])
      else
        puts %{
Error, you forgot to log you having lunch, cannot come back.
Please use "termite add lunch [YYYY-mm-dd HH:MM], and try again."
}
      end
    when 'stop'
      row = Entry.last
      if !row.nil? && (row.start? || row.back?) # ['start','back'].include?(row.status)
        Entry.create :date => now.to_i, :status => arg, :comments => comments
        set_adium_status('away', ADIUM_STATUS[:stop])
      else
        puts %{
Error, you forgot to log you were working or back from lunch, cannot stop.
Please use "termite add [start|back] [YYYY-mm-dd HH:MM], and try again."
}
      end
    when 'report'
      periodic = ARGV.shift || 'daily'
      case periodic
        when 'daily'
          # daily report
          status_size = 87
          puts "Daily report".center(status_size).black_yellow_bold
          current = now.day.to_i
          puts [
            'day'.left(11),
            'started'.right(10),
            'lunch at'.right(10),
            'back at'.right(10),
            'stopped'.right(10),
            'lunch T'.right(10),
            '- lunch'.right(10),
            'work T'.right(10)
          ].join('|').black_white_bold
          
          # total values
          worked_hours = 0
          worked_days = 0
          
          today = now
          0.upto(7) do |count|
            (start, lunch, back, stop, lunch_duration, req_lunch_duration, total) = Entry.report_daily today
            
            worked_hours += total.to_i - TIME_CONFIG[:fix_time] if !total.nil?
            worked_days += 1 if !start.nil? && ![0,6].include?(today.wday) && !today.is_holiday?
            
            puts [
              today.weekday_date.left(11).tc(cpick(:date => today)),
              ((start.nil?) ? '' : start.time).right(10).tc(cpick(:status => 'start', :date => start.to_i)),
              ((lunch.nil?) ? '' : lunch.time).right(10).tc(cpick(:status => 'lunch', :date => lunch.to_i)),
              ((back.nil?) ? '' : back.time).right(10).tc(cpick(:status => 'back', :date => back.to_i)),
              ((stop.nil? || stop==now) ? '' : stop.time).right(10).tc(cpick(:status => 'stop', :date => stop.to_i)),
              ((lunch_duration.to_i > 0 && !start.nil? && !lunch.nil? && !back.nil?) ? lunch_duration.time : '').right(10).tc(cpick(:status => 'lunch_duration', :date => lunch_duration.to_i)),
              ((req_lunch_duration.to_i > 0 && !start.nil?) ? req_lunch_duration.time : '').right(10).tc(cpick(:status => 'lunch_duration', :date => req_lunch_duration.to_i)),
              ((total.nil?) ? '' : total.time).right(10).tc(cpick(:status => 'total', :date => total.to_i))
            ].join('|')
            today = today.yesterday
          end
          total = Time.at(worked_hours + TIME_CONFIG[:fix_time])
          average = Time.at((worked_hours/worked_days) + TIME_CONFIG[:fix_time]) if worked_days > 0
          
          footer = ''
          footer += "worked: #{worked_days} days".left(21).black_white_bold
          footer += (worked_days > 0 ? "~ #{(average.day-1) * 24 + average.hour}:#{'%02d' % average.min} hours/day" : '').left(21).black_white_bold
          footer += (worked_days > 0 ? "EWT #{worked_days * 8} hours" : '').right(21).black_white_bold
          footer += (worked_hours > 0 ? "Total #{(total.day-1) * 24 + total.hour}:#{'%02d' % total.min} hours" : '').right(25).black_white_bold
          puts footer + "\n\n" if worked_days > 0 || worked_hours > 0
        when 'weekly'
          today = now
          start_of_week = today.days(-today.wday)
          
          status_size = 70
          puts "Weekly report".center(status_size).black_yellow_bold
          
          week_days_header = ["".left(15).black_white]
          0.upto(6) do |day_of_week|
            day = start_of_week.days(day_of_week)
            week_days_header << day.weekday.center(6).tc('black', cpick(:date => day), 'b')
          end
          puts week_days_header.join("|")
          
          # total values
          worked_hours = 0
          worked_days = 0
          
          0.upto(3) do |week|
            start_of_week = today.days(-today.wday - 7 * week)
            end_of_week = start_of_week.days(6)
            week_days = ["#{start_of_week.day_month} - #{end_of_week.day_month}".left(15).black_white]
            0.upto(6) do |day_of_week|
              (start, lunch, back, stop, lunch_duration, req_lunch_duration, total) = Entry.report_daily start_of_week.days(day_of_week)
              worked_hours += total.to_i - TIME_CONFIG[:fix_time] if !total.nil?
              worked_days += 1 if !start.nil? && ![0,6].include?(start_of_week.days(day_of_week).wday) && !start_of_week.days(day_of_week).is_holiday?
              week_days << ((total.nil?) ? '' : total.time).right(7).tc(cpick(:status => 'total', :date => total.to_i))
            end
            puts week_days.join('|')
          end
          
          total = Time.at(worked_hours + TIME_CONFIG[:fix_time])
          average = Time.at((worked_hours/worked_days) + TIME_CONFIG[:fix_time]) if worked_days > 0
          
          footer = ''
          footer = "worked: #{worked_days}d".left(15).black_white_bold
          footer += (worked_days > 0 ? "~ #{(average.day-1) * 24 + average.hour}:#{'%02d' % average.min} hours/day" : '').left(18).black_white_bold
          footer += (worked_days > 0 ? "EWT #{worked_days * 8} hours" : '').right(18).black_white_bold
          footer += (worked_hours > 0 ? "Total #{(total.day-1) * 24 + total.hour}:#{'%02d' % total.min} hours" : '').right(20).black_white_bold
          puts footer + "\n\n" if worked_days > 0 || worked_hours > 0
        when 'monthly'
          this_month = ARGV.shift || now.month
          this_year = ARGV.shift || now.year
          today = (this_month != now.month || this_year != now.year) ? Time.local(this_year, this_month, 1) : now
          start_of_week = today.days(-today.wday)
          
          status_size = 82
          puts today.month_year.center(status_size).black_yellow_bold
          
          week_days_header = []
          0.upto(6) do |wday|
            day = start_of_week.days(wday)
            week_days_header << day.weekday.center(10).tc('black', cpick(:date => day), 'b')
          end
          puts week_days_header.join('|')
          
          # total values
          worked_hours = 0
          worked_days = 0
          
          month = []          
          day = start_of_month = today.start_of_month
          while day.month == today.month
            (start, lunch, back, stop, lunch_duration, req_lunch_duration, total) = Entry.report_daily today.day == day.day ? today : day
            worked_hours += total.to_i - TIME_CONFIG[:fix_time] if !total.nil?
            worked_days += 1 if !start.nil? && ![0,6].include?(day.wday) && !day.is_holiday?
            month[day.day] = [day.wday, total]
            day = day.tomorrow
          end
          
          week = []
          for i in (1...month.size)
            week << "".left(11) while month[i][0] > week.size
            week << "#{("%02d" % i).to_s.right(4).tc(Time.local(this_year, this_month, i).is_holiday? ? 'white' : 'black', cpick(:date => Time.local(this_year, this_month, i)))}#{(month[i][1].nil? ? '' : month[i][1].time).right(7).tc(cpick(:status => 'total', :date => month[i][1].to_i))}"
            if month[i][0] == 6
              puts week.join('|')
              week = []
            end
          end
          if !week.empty?
            week << "".left(11) while week.size <= 6
            puts week.join('|')
          end
          
          total = Time.at(worked_hours + TIME_CONFIG[:fix_time])
          average = Time.at((worked_hours/worked_days) + TIME_CONFIG[:fix_time]) if worked_days > 0
          
          footer = ''
          footer = "worked: #{worked_days} days".left(16).black_white_bold
          footer += (worked_days > 0 ? "~ #{(average.day-1) * 24 + average.hour}:#{'%02d' % average.min} hours/day" : '').left(20).black_white_bold
          footer += (worked_days > 0 ? "EWT #{worked_days * 8} hours" : '').right(22).black_white_bold
          footer += (worked_hours > 0 ? "Total #{(total.day-1) * 24 + total.hour}:#{'%02d' % total.min} hours" : '').right(24).black_white_bold
          puts footer + "\n\n" if worked_days > 0 || worked_hours > 0
        when 'period'          
          start_date = ARGV.shift || now.days(-30).date
          end_date = ARGV.shift || now.date
          
          today = now
          start_of_week = now.days(-now.wday)
        
          week_days_header = []
          0.upto(6) do |wday|
            day = start_of_week.days(wday)
            week_days_header << day.weekday.center(13).tc('black', cpick(:date => day), 'b')
          end
          
          if start_date.is_a?(String)
            date = start_date.split('/').reverse.map{|d| d.to_i}
            day = Time.local(date[0], date[1], date[2])
          else
            day = start_date
          end
          
          if end_date.is_a?(String)
            date = end_date.split('/').reverse.map{|d| d.to_i}
            end_day = Time.local(date[0], date[1], date[2])
          else
            end_day = end_date
          end
          
          status_size = 103
          puts "Period: #{day.date} - #{end_day.date}".center(status_size).black_yellow_bold
          puts week_days_header.join('|')
          
          # total values
          worked_hours = 0
          worked_days = 0
          
          days = {}
          while day.to_i <= end_day.to_i
            (start, lunch, back, stop, lunch_duration, req_lunch_duration, total) = Entry.report_daily day
            worked_hours += total.to_i - TIME_CONFIG[:fix_time] if !total.nil?
            worked_days += 1 if !start.nil? && ![0,6].include?(day.wday) && !day.is_holiday?
            days[day.to_i.to_s.to_sym] = {:w => day.wday, :t => total}
            day = day.tomorrow
          end
          
          week = []
          days.sort{|a,b| a[0].to_i <=> b[0].to_i}.each do |unixtime, hours|
            week << "".left(14) while hours[:w] > week.size
            day = Time.at(unixtime.to_s.to_i)
            week << "#{day.day_month.right(5).tc(day.is_holiday? ? 'white' : 'black', cpick(:date => day))}#{(hours[:t].nil? ? '' : hours[:t].time).right(7).tc(cpick(:status => 'total', :date => hours[:t].to_i))}"
            if hours[:w] == 6
              puts week.join('|')
              week = []
            end
          end
          if !week.empty?
            week << "".left(14) while week.size < 7
            puts week.join('|')
          end
          
          total = Time.at(worked_hours + TIME_CONFIG[:fix_time])
          average = Time.at((worked_hours/worked_days) + TIME_CONFIG[:fix_time]) if worked_days > 0
          
          footer = ''
          footer = "worked: #{worked_days} days".left(25).black_white_bold
          footer += (worked_days > 0 ? "~ #{(average.day-1) * 24 + average.hour}:#{'%02d' % average.min} hours/day" : '').left(25).black_white_bold
          footer += (worked_days > 0 ? "EWT #{worked_days * 8} hours" : '').right(26).black_white_bold
          footer += (worked_hours > 0 ? "Total #{(total.day-1) * 24 + total.hour}:#{'%02d' % total.min} hours" : '').right(28).black_white_bold
          puts footer + "\n\n" if worked_days > 0 || worked_hours > 0
      end
    when 'droptable'
      puts "Are you sure you want to drop your timesheet table? [y/N]".warning
      puts 'WARNING: THIS CANNOT BE UNDONE!'.banner.black_yellow_blink
      confirmation = STDIN.gets.chomp
      DB.execute("drop table timesheet") if confirmation =~ /y/i
    when 'help', /[^\-]\w+/
      puts help_message
  end
  @row = Entry.last
  DB.close
rescue Exception => e
  puts "An error ocurred #{e.message}\n  #{e.backtrace.join("\n  ")}".error
end

unless ARGV.include?('--no-status')
  if arg == '-f' || ARGV.include?('-f')
    `clear`
    while true
      print "\r#{show_status(status_size)}"
      sleep(1)
    end
  else
    puts show_status(status_size)
  end
end
