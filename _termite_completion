#!/usr/bin/env ruby

# to install, add the following line to your .bash_profile or .bashrc
# complete -C path/to/_termite_completion -o default termite

# Termite completion will return matching termite commands given typed text. This way
# you can auto-complete tasks as you are typing them by hitting [tab] or [tab][tab]
# This also caches termite commands for optimium speed

class TermiteCompletion
  CACHE_FILE_NAME = ".termite_cache"
  
  def initialize(command)
    @command = command
  end
  
  def matches
    exit 0 if script_file.nil?
    if matching_features.size == 1
      matching_parameters
    else
      matching_features
    end
  end
  
  private
  
  def typed
    @command[/^termite\s+([a-z]+)\s?/i, 1] || ''
  end
  
  def typed_param
    @command[/^termite\s+[a-z]+\s+([a-z]+)\s?/i, 1] || ''
  end

  def typed_id
    @command[/edit (\d+)\s?/, 1] || ''
  end
  
  def typed_date
    @command[/ (\"[0-9\-\:\s]*|\'[0-9\-\:\s]*|\"[0-9\-\:\s]+\"|\'[0-9\-\:\s]+\')\s?$/, 1] || ''
  end
  
  def matching_features
    all_features.select do |feature|
      feature[0, typed.length] == typed
    end
  end
  
  def matching_parameters
    case typed
      when 'report'
        case typed_param
          when '', /[a-z]+$/i
            ['daily', 'weekly', 'monthly'].select do |param|
              param[0, typed_param.length] == typed_param and param != typed_param
            end
          else ''
        end
      when 'add'
        if ['start', 'stop', 'lunch', 'back', 'sick'].include? typed_param
          case typed_date
            when /^("|')$/
              [Time.now.strftime("%Y-%m-%d %H:%M") + typed_date]
            else
              puts "insert a date formatted as 'YYYY-mm-dd HH:MM'"
              ''
          end
        end

        case typed_param
          when '', /^[a-z]+$/i
            ['start', 'stop', 'lunch', 'back', 'sick'].select do |param|
              param[0, typed_param.length] == typed_param and param != typed_param
            end
          else ''
        end        
      when 'edit'
        if typed_id == '' and typed_date == ''
          puts "insert an entry's id"
          ''
        elsif typed_id =~ /\d+/ and typed_date == ''
          [typed_id]
        elsif typed_id =~ /\d+/
          case typed_date
            when /^("|')$/
              [Time.now.strftime("%Y-%m-%d %H:%M") + typed_date]
            # when /^("|')\d+$/
            #   [now.year.to_s + '-']
            # when /^("|')\d+\-$/
            #   [now.month.to_s + '-']
            # when /^("|')\d+\-\d+\-$/
            #   [now.day.to_s + ' ']
            # when /^("|')\d+\-\d+\-\d+ $/
            #   [now.hour.to_s + ':']
            # when /^("|')\d+\-\d+\-\d+ \d+\:$/
            #   [now.min.to_s + typed_date[0,1]]
            else
              puts "insert a date formatted as 'YYYY-mm-dd HH:MM'"
              ''
          end
        else
          ''
        end
      else matching_features
    end
  end
  
  def all_features
    cache_current? ? features_from_cache : generate_features
  end
  
  def cache_current?
    File.exist?(cache_file) && File.mtime(cache_file) >= File.mtime(File.join(File.dirname(__FILE__), script_file))
  end
  
  def script_file
    ['_termite_completion','termite','entry.rb'].detect do |file|
      File.file? File.join(File.dirname(__FILE__), file)
    end
  end
  
  def cache_file
    File.join(ENV['HOME'], CACHE_FILE_NAME)
  end
  
  def features_from_cache
    IO.read(cache_file).split
  end
  
  def generate_features
    features = `termite help --no-status`.split("\n")[2..-1].collect {|line| line.split(/\s+/)[0]}
    File.open(cache_file, 'w') { |f| f.write features.delete_if{|f| f == ''}.sort{|a,b| a <=> b}.join("\n") }
    features
  end
end
puts TermiteCompletion.new(ENV["COMP_LINE"]).matches
exit 0
